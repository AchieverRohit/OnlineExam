// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using thinkschool.OnlineExam.DataAccess.Persistence;

#nullable disable

namespace thinkschool.OnlineExam.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRandomized")
                        .HasColumnType("bit");

                    b.Property<decimal>("PassingMarks")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("TotalMarks")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.ExamResult", b =>
                {
                    b.Property<int>("ExamResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamResultId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("TotalObtainedMarks")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserExamId")
                        .HasColumnType("int");

                    b.HasKey("ExamResultId");

                    b.HasIndex("UserExamId")
                        .HasDatabaseName("IX_ExamResults_UserExamId");

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Lookup", b =>
                {
                    b.Property<int>("LookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupId"));

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LookupId");

                    b.ToTable("Lookups");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<decimal>("Marks")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("IX_Options_QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFromQuestionBank")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedia")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("bit");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("MediaURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("QuestionMaxMarks")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestionId");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("IX_Questions_SectionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<decimal>("PassingMarks")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("TotalMarks")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WeightagePercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.HasKey("SectionId");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("IX_Sections_ExamId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.SectionResult", b =>
                {
                    b.Property<int>("SectionResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionResultId"));

                    b.Property<decimal>("MarksObtained")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<int>("QuestionsAttempted")
                        .HasColumnType("int");

                    b.Property<string>("ResultStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("UserExamId")
                        .HasColumnType("int");

                    b.HasKey("SectionResultId");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("IX_SectionResults_SectionId");

                    b.HasIndex("UserExamId")
                        .HasDatabaseName("IX_SectionResults_UserExamId");

                    b.ToTable("SectionResults");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.UserAnswer", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAnswerId"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("UserExamId")
                        .HasColumnType("int");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("IX_UserAnswers_QuestionId");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("IX_UserAnswers_SectionId");

                    b.HasIndex("UserExamId")
                        .HasDatabaseName("IX_UserAnswers_UserExamId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.UserAnswerOption", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("UserAnswerId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("UserAnswerOptions");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.UserExam", b =>
                {
                    b.Property<int>("UserExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserExamId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("ExamStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("FinishedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAutoSubmitted")
                        .HasColumnType("bit");

                    b.Property<int>("NoOfAttempt")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalMarks")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.HasKey("UserExamId");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("IX_UserExams_ExamId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserExams_UserId");

                    b.ToTable("UserExams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thinkschool.OnlineExam.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.ExamResult", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.UserExam", "ExamResultUserExamIdfk")
                        .WithMany("ExamResultUserExams")
                        .HasForeignKey("UserExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ExamResultUserExamIdfk");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Option", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.Question", "OptionQuestionIdfk")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OptionQuestionIdfk");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Question", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.Section", "QuestionSectionIdfk")
                        .WithMany("QuestionSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionSectionIdfk");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Section", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.Exam", "SectionExamIdfk")
                        .WithMany("SectionExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SectionExamIdfk");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.SectionResult", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.Section", "SectionResultSectionIdfk")
                        .WithMany("SectionResultSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thinkschool.OnlineExam.Core.Entities.UserExam", "SectionResultUserExamIdfk")
                        .WithMany("SectionResultUserExams")
                        .HasForeignKey("UserExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SectionResultSectionIdfk");

                    b.Navigation("SectionResultUserExamIdfk");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.UserAnswer", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.Question", "UserAnswerQuestionIdfk")
                        .WithMany("UserAnswerQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thinkschool.OnlineExam.Core.Entities.Section", "UserAnswerSectionIdfk")
                        .WithMany("UserAnswerSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thinkschool.OnlineExam.Core.Entities.UserExam", "UserAnswerUserExamIdfk")
                        .WithMany("UserAnswerUserExams")
                        .HasForeignKey("UserExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserAnswerQuestionIdfk");

                    b.Navigation("UserAnswerSectionIdfk");

                    b.Navigation("UserAnswerUserExamIdfk");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.UserAnswerOption", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.Option", "UserAnswerOptionOptionIdfk")
                        .WithMany("UserAnswerOptionOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thinkschool.OnlineExam.Core.Entities.UserAnswer", "UserAnswerOptionUserAnswerIdfk")
                        .WithMany("UserAnswerOptionUserAnswers")
                        .HasForeignKey("UserAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserAnswerOptionOptionIdfk");

                    b.Navigation("UserAnswerOptionUserAnswerIdfk");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.UserExam", b =>
                {
                    b.HasOne("thinkschool.OnlineExam.Core.Entities.Exam", "UserExamExamIdfk")
                        .WithMany("UserExamExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thinkschool.OnlineExam.Core.Entities.ApplicationUser", "UserExamUserIdfk")
                        .WithMany("UserExamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserExamExamIdfk");

                    b.Navigation("UserExamUserIdfk");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserExamUsers");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Exam", b =>
                {
                    b.Navigation("SectionExams");

                    b.Navigation("UserExamExams");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Option", b =>
                {
                    b.Navigation("UserAnswerOptionOptions");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Question", b =>
                {
                    b.Navigation("OptionQuestions");

                    b.Navigation("UserAnswerQuestions");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.Section", b =>
                {
                    b.Navigation("QuestionSections");

                    b.Navigation("SectionResultSections");

                    b.Navigation("UserAnswerSections");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.UserAnswer", b =>
                {
                    b.Navigation("UserAnswerOptionUserAnswers");
                });

            modelBuilder.Entity("thinkschool.OnlineExam.Core.Entities.UserExam", b =>
                {
                    b.Navigation("ExamResultUserExams");

                    b.Navigation("SectionResultUserExams");

                    b.Navigation("UserAnswerUserExams");
                });
#pragma warning restore 612, 618
        }
    }
}
